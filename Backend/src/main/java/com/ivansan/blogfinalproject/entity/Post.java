package com.ivansan.blogfinalproject.entity;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import lombok.*;
import org.hibernate.annotations.CreationTimestamp;
import org.hibernate.annotations.UpdateTimestamp;

import java.time.LocalDateTime;
import java.util.Set;

@Entity
@AllArgsConstructor
@NoArgsConstructor
@Builder
@Getter
@Setter
// unique constraint to make sure that the title of the post is unique
@Table(uniqueConstraints = @UniqueConstraint(columnNames = "title"))
public class Post {
    @Id
    // @GeneratedValue annotation is used to tell spring that this field is auto generated by the database
    // - strategy attribute is used to tell spring that the id is auto generated by the database
    // - GenerationType.IDENTITY is used to tell spring that the id is auto generated by the database
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    @NotNull
    private String title;
    @NotNull
    // @Column annotation is used to tell spring that this field is a column in the database
    // length attribute is used to tell spring that the maximum length of the column is 512 characters
    @Column(length = 512)
    private String description;
    @NotNull
    // @Lob annotation is used to tell spring that this field is a large object
    @Lob
    private String content;

    @CreationTimestamp
    // @CreationTimestamp annotation is used to tell spring that this field is auto generated by the database
    private LocalDateTime createdAt;

    @UpdateTimestamp
    // @UpdateTimestamp annotation is used to tell spring that this field is auto generated by the database
    private LocalDateTime updatedAt;

    // @OneToMany annotation is used to tell spring that this field is a one-to-many relationship with the Comment entity
    // - mappedBy attribute is used to tell spring that the field that is used to map the relationship is the post field in the Comment entity
    // - CascadeType.ALL attribute is used to tell spring that all the operations that are done on the post entity should be cascaded to the comments entity
    // - FetchType.LAZY is used to tell spring that the comments should be fetched lazily (fetch lazy means that the comments should be fetched only when they are needed)
    // - FetchType.EAGER is used to tell spring that the comments should be fetched eagerly (fetch eager means that the comments should be fetched when the post is fetched)
    @OneToMany(mappedBy = "post", cascade = CascadeType.ALL, fetch = FetchType.LAZY)
    private Set<Comment> comments;
}
